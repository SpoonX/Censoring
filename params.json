{"name":"Censoring","tagline":"Censor or highlight words and other patterns intelligently.","body":"# Censoring\r\nThis module allows you to detect patterns in texts, even when attempted to be hidden and then either highlight (markup) or censor (replace) them.\r\nIt checks for upper casing, lower casing, 1337 replacements, or s,p-l.'i*t.\r\n\r\n**Note:** This module works in the browser as a global, or AMD module, as well as in node.js.\r\n\r\n## Example:\r\n\r\n```javascript\r\nvar Censoring    = require('censoring'),\r\n    scan         = new Censoring(),\r\n    testSentence = '';\r\n\r\n// Enable filters we want to use\r\nscan.enableFilters(['phone_number', 'email_address', 'words']);\r\n\r\n// Word\r\ntestSentence += 'The 1nt3r.n.e.t will not be censored! ';\r\n\r\n// Phone number\r\ntestSentence += 'Call me on 555-123456';\r\n\r\n// Email address\r\ntestSentence += ', or send an email to me[at]example(dot)com.';\r\n\r\n// Let's make the word internet illegal.\r\nscan.addFilterWord('internet');\r\n\r\n// Tell the scanner we're done, and it can prepare the results.\r\nscan.prepare(testSentence);\r\n\r\n// Did we have a match?\r\nif (scan.test()) {\r\n  console.log(\r\n    'We had a match! Here it is, but censored:',\r\n    scan.replace()\r\n  );\r\n\r\n  // The *** will not be censored! Call me on ***, or send an email to ***.\r\n}\r\n```\r\n\r\n\r\n## Installation\r\n`npm install --save censoring`\r\n\r\n## Filters\r\n\r\n| Pattern       | Description                              |\r\n| :------------ | :----------------------------------------|\r\n| long_number   | Matches long, consecutive numbers        |\r\n| phone_number  | Matches phone numbers.                   |\r\n| email_address | Matches email addresses in many formats. |\r\n| url           | Matches URL patterns.                    |\r\n| words         | Finds words, even when in disguise.      |\r\n\r\n## Methods\r\nA `Censoring` instance has the following methods.\r\n\r\n### .enableFilter(string filterName)\r\nEnable a filter from the list of filters. By default, they're all disabled.\r\n\r\n```javascript\r\nvar scan = new Censoring();\r\n\r\nscan.enableFilter('email_address');\r\n```\r\n\r\n### .enableFilters(Array filterNames)\r\nEnable multiple filters from the list of filters. By default, they're all disabled.\r\n\r\n```javascript\r\nvar scan = new Censoring();\r\n\r\nscan.enableFilters(['phone_number', 'email_address']);\r\n```\r\n\r\n### .disableFilter(string filterName)\r\nDisable a previously enabled filter.\r\n\r\n```javascript\r\nvar scan = new Censoring();\r\n\r\nscan.enableFilter('email_address');\r\nscan.disableFilter('email_address');\r\n```\r\n\r\n### .addFilterWords(Array filterWords)\r\nAdd multiple words to filter on.\r\n\r\n```javascript\r\nvar scan = new Censoring();\r\n\r\nscan.enableFilter('words');\r\nscan.addFilterWord(['stoopid head', 'big meany']);\r\n```\r\n\r\n### .addFilterWord(string filterWord)\r\nAdd a word to filter on.\r\n\r\n```javascript\r\nvar scan = new Censoring();\r\n\r\nscan.enableFilter('words');\r\nscan.addFilterWord('doody face');\r\n```\r\n\r\n### .setReplacementString(string replacementString)\r\nSet the string to replace matches with. Defaults to `***`.\r\n\r\n```javascript\r\nvar scan = new Censoring();\r\n\r\nscan.setReplacementString('pony');\r\n```\r\n\r\n### .getReplacementString()\r\nGet the currently set replacement string.\r\n\r\n```javascript\r\nvar scan = new Censoring();\r\n\r\nscan.getReplacementString(); // Returns '***'\r\n```\r\n\r\n### .setHighlightColor(string hexCode)\r\nSet the color for highlighted occurrences. Defaults to `#F2B8B8`.\r\n\r\n```javascript\r\nvar scan = new Censoring();\r\n\r\nscan.setHighlightColor('#ff0');\r\n```\r\n\r\n### .prepare(string inputString[, bool highlight])\r\nPrepare a string, and optionally supply `highlight` to not replace occurrences, but highlight them using html.\r\n\r\n```javascript\r\nvar scan = new Censoring();\r\n\r\nscan.enableFilter('email_address');\r\nscan.prepare('me@example[dot]com', true);\r\n```\r\n\r\n### .test()\r\nTest if the string you've prepared matches any of the filters.\r\n\r\n```javascript\r\nvar scan = new Censoring();\r\n\r\nscan.enableFilter('email_address');\r\nscan.prepare('me@example[dot]com');\r\n\r\nif (scan.test()) {\r\n  console.log('We have a match!');\r\n}\r\n```\r\n\r\n### .replace()\r\nReplace all occurrences found in the prepared string.\r\n\r\n```javascript\r\nvar scan = new Censoring();\r\n\r\nscan.enableFilter('email_address');\r\nscan.prepare('Email me at me@example[dot]com');\r\n\r\nconsole.log(scan.replace());\r\n// Outputs: Email me at ***\r\n```\r\n\r\n### .filterString(string inputString[, bool highlight])\r\nFilter a string directly, without preparing it first.\r\n\r\n> Note: Bad for performance When combined with `.test()` and `.replace`.\r\n\r\n```javascript\r\nvar scan = new Censoring(),\r\n    testString = \"I'm going to tell mommy that you're a big meany!\",\r\n    result;\r\n\r\nscan.enableFilter('words');\r\nscan.addFilterWord(['stoopid head', 'big meany']);\r\n\r\nresult = scan.filterString(testString);\r\n\r\nconsole.log(result);\r\n// Outputs: I'm going to tell mommy that you're a ***!\r\n```\r\n\r\n### .addFilter(string name)\r\nAdd a new filter. A filter is essentially a `name` and a `pattern`.\r\n\r\n```javascript\r\nvar scan = new Censoring();\r\n\r\nscan.addFilter('bigot', {\r\n    enabled: true,\r\n    pattern: /^I'm not a racist,? but/\r\n});\r\n```\r\n\r\n## Support / contributing\r\nIf you have any questions or feature requests (such as publishing on bower..?) you can:\r\n\r\n* Check out the issues\r\n* Join us on freenode (#spoonx)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}